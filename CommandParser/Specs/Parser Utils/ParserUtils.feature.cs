// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CommandParser.Specs.ParserUtils
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ParserUtils")]
    public partial class ParserUtilsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ParserUtils.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ParserUtils", "\tIt performs basic, reusable tasks for the command parser", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get a path extension")]
        public virtual void GetAPathExtension()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get a path extension", ((string[])(null)));
#line 4
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Path"});
            table1.AddRow(new string[] {
                        "Desktop/match.tb"});
            table1.AddRow(new string[] {
                        "match.tb"});
            table1.AddRow(new string[] {
                        "match.png"});
            table1.AddRow(new string[] {
                        "math.py"});
            table1.AddRow(new string[] {
                        "hey"});
            table1.AddRow(new string[] {
                        "Documents/My Folder/file.tb"});
            table1.AddRow(new string[] {
                        "Desktop/match"});
            table1.AddRow(new string[] {
                        ""});
#line 5
 testRunner.Given("I have entered the following paths", ((string)(null)), table1, "Given ");
#line 15
 testRunner.When("I submit a match file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("it should return the correct extension", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("An incorrect path extension has been entered")]
        public virtual void AnIncorrectPathExtensionHasBeenEntered()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An incorrect path extension has been entered", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Path"});
            table2.AddRow(new string[] {
                        "match.png"});
            table2.AddRow(new string[] {
                        "math.py"});
            table2.AddRow(new string[] {
                        "hey"});
            table2.AddRow(new string[] {
                        "Desktop/match"});
            table2.AddRow(new string[] {
                        ""});
#line 19
 testRunner.Given("I have entered the following invalid paths", ((string)(null)), table2, "Given ");
#line 26
 testRunner.When("I submit a match file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
 testRunner.Then("it should display an error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A correct path extension has been entered")]
        public virtual void ACorrectPathExtensionHasBeenEntered()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A correct path extension has been entered", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Path"});
            table3.AddRow(new string[] {
                        "match.tb"});
            table3.AddRow(new string[] {
                        "Desktop/math.tb"});
            table3.AddRow(new string[] {
                        "hey.tb"});
            table3.AddRow(new string[] {
                        "Desktop/Docs/hm.tb"});
            table3.AddRow(new string[] {
                        "a.tb"});
#line 30
 testRunner.Given("I have entered the following valid paths", ((string)(null)), table3, "Given ");
#line 37
 testRunner.When("I submit a match file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
 testRunner.Then("it should accept parse the file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
